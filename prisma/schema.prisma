generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  status              Boolean               @default(true)
  email               String?               @unique
  password            String?
  organizationJoin    OrganizationJoin[]
  organizationMembers OrganizationMembers[]
  userBadge           UserBadge[]
  userProfile         UserProfile[]
}

model UserProfile {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          Int
  userName        String
  bio             String
  mainClub        String
  instarAccount   String
  profileImageUrl String?

  users           Users    @relation(fields: [userId], references: [id])
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  badge     Badge
  users     Users    @relation(fields: [userId], references: [id])
}

model Organizations {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  status              Boolean               @default(true)
  mainActivity        MainActivity
  organizationJoin    OrganizationJoin[]
  organizationMembers OrganizationMembers[]
}

model OrganizationJoin {
  id             Int                    @id @default(autoincrement())
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  status         Boolean                @default(true)
  JoinStatus     OrganizationJoinStatus @default(WAITING)
  organizationId Int
  userId         Int
  nickName       String
  organization   Organizations          @relation(fields: [organizationId], references: [id])
  users          Users                  @relation(fields: [userId], references: [id])
}

model OrganizationMembers {
  id             Int           @id @default(autoincrement())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         Boolean       @default(true)
  organizationId Int
  userId         Int
  position       Position
  nickName       String
  organization   Organizations @relation(fields: [organizationId], references: [id])
  users          Users         @relation(fields: [userId], references: [id])
}

enum Badge {
  SUPERMAN
  BATMAN
  SPIDERMAN
  WONDERWOMAN
}

enum MainActivity {
  HEALTH
  DIET
}

enum OrganizationJoinStatus {
  JOIN
  WAITING
  CANCELLAION
}

enum Position {
  READER
  MEMBER
}
